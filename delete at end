#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void createList(int n);
void deleteLastNode();
void displayList();

int main() {
    int n, choice;

    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    createList(n);
    printf("\nData in the list \n");
    displayList();

    printf("\nPress 1 to delete last node: ");
    scanf("%d", &choice);

    if (choice == 1)
        deleteLastNode();

    printf("\nData in the list \n");
    displayList();

    return 0;
}

void createList(int n) {
    struct Node* newNode, *temp;
    int data, i;

    head = (struct Node*)malloc(sizeof(struct Node));

    if (head == NULL) {
        printf("Memory cannot be allocated.\n");
    } else {
        temp = head;

        for (i = 1; i <= n; i++) {
            printf("Enter the data of node %d: ", i);
            scanf("%d", &data);

            newNode = (struct Node*)malloc(sizeof(struct Node));
            newNode->data = data;
            newNode->next = NULL;

            if (i == 1)
                head = newNode;
            else
                temp->next = newNode;

            temp = newNode;
        }
    }
}

void deleteLastNode() {
    struct Node* toDelete, *secondLastNode;

    if (head == NULL) {
        printf("List is already empty.\n");
        return;
    }

    toDelete = head;
    secondLastNode = head;

    while (toDelete->next != NULL) {
        secondLastNode = toDelete;
        toDelete = toDelete->next;
    }

    if (toDelete == head)
        head = NULL;
    else
        secondLastNode->next = NULL;

    free(toDelete);
    printf("Successfully deleted last node of list.\n");
}

void displayList() {
    struct Node* temp;

    if (head == NULL)
        printf("List is empty.\n");
    else {
        temp = head;

        while (temp != NULL) {
            printf("Data = %d\n", temp->data);
            temp = temp->next;
        }
    }
}
